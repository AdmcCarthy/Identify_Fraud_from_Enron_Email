===============================
Identify Fraud from Enron Email
===============================

*Adam McCarthy*

*Problem posed in Udacity Intro to machine learning*

Getting Started
---------------

To test results:

.. code-block:: bash
    
    $ cd final_project
    $ tester.py

To re-run:

.. code-block:: bash

    $ cd final_project
    $ poi_id.py

Overview of data
----------------

Person of interest - Label to be predicted
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The predicted label is person of interst (POI). A person of interest
reflects those in the Enron case who have been
indicted, settled without admitting guilt
or testified in exchange for immunity.

The list of POIs has been generated by Udacity.
The list was hand drafted from various
sources so could contain 
errors.

There are 35 persons of interst in total
30 of which worked for Enron.

Jeffrey Skilling was the CEO during the fraud period.

Kenneth Lay was chairman.

Andrew Fastow was CFO.

Email dataset
~~~~~~~~~~~~~

The email dataset is from ` <https://www.cs.cmu.edu/~./enron/>`_

Email dataset consists of 150 directories each reflecting a person,
specified as lastname followed by first letter of first name.

There are 86 people with email data suggesting that those
without financial data have not been used.

Within poi_names.txt it can be seen with a yes (y),
no (n) column if the poi has an email directory
in the dataset. This means the majority
of poi do not their email inboxes within the Enron Email
dataset.

Enron Final Project dataset
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The dataset created by Udacity is aggregated to contain email
and finacial information.

It is set up as a key value pair where each key is a person with
all the features stored as a dictionary as that person value.

There are 146 persons within the dataset. For each person there
are 21 variables.

The dataset contains data on 18 of the POIs.

Note that when missing values occur 
featureFormat() and targetFeatureSplit()
will replace this with 0.

Most of the values have a range of missing parameters,
see table below.

.. csv-table:: Datset Variables
   :header: "Variable, "Missing Values"
   :widths: 15, 5

    "bonus", 64
    "deferral_payments", 107
    "deferred_income", 97
    "director_fees", 129
    "email_address", 35
    "exercised_stock_options", 44
    "expenses", 51
    "from_messages", 60
    "from_poi_to_this_person", 60
    "from_this_person_to_poi", 60
    "loan_advances", 142
    "long_term_incentive", 80
    "other", 53
    "poi", 0
    "restricted_stock", 36
    "restricted_stock_deferred", 128
    "salary", 51
    "shared_receipt_with_poi", 60
    "to_messages", 60
    "total_payments", 21
    "total_stock_value", 20

Email Variables
---------------

From messages
~~~~~~~~~~~~~

Out of 86 people the mean number of messages from them is 609.
The range is 12 to 14368, with a median of 41. 
This suggests a highly skewed dataset.

From poi to this person
~~~~~~~~~~~~~~~~~~~~~~~

Out of 86 people the mean is 65.
The range is 0 to 528, with a median of 35.
This would be a skewed dataset.

From this person to poi
~~~~~~~~~~~~~~~~~~~~~~~
Out of 86 people the mean is 41 emails.
The range is 0 to 609, with a median of 8.
This is highly skewed.

Shared receipt with poi
~~~~~~~~~~~~~~~~~~~~~~~

Out of the 86 with email data the mean is 1176.
The range is 2 to 5521, with a median of 741.
This is skewed but the mean and median are higher.

To messages
~~~~~~~~~~~

Out the email data the mean is 2074.
The range is 57 to 15149, with a median of 1211.
This is highly skewed.

Financial variables
-------------------

Bonus
~~~~~

82 people have bonus information, with a mean of 2,374,235$.
The range is 70,000$ to 97,343,620$.

Deferral payments
~~~~~~~~~~~~~~~~~

39 people have this information, with a mean value of 1,642,674$.
The range is -102,500$ to 32,083,400$.
Unsure why this could be negative.

Deferred income
~~~~~~~~~~~~~~~

49 people with a mean of -1,140,475$.
The range is -27,992,890$ to -833$.
This is a negative variable.

Director fees
~~~~~~~~~~~~~

17 people have this information, with a mean of 166,804$.
The range is 3285$ to 1,398,517$.

Exercised stock options
~~~~~~~~~~~~~~~~~~~~~~~

102 people have information, with a mean of 5,987,054$.
The range is 3285$ to 31,176,400$.

Expenses
~~~~~~~~

95 people have this information, with a mean of 108,728$.
The range is 148$ to 5,234,198$.

Loan advances
~~~~~~~~~~~~~

Only four have this information.
The mean on these four values is 41962500$.
The range is 1,600,000$ to 83,925,000$.
This is a low number of people but a very
large amount of money.

Long term incentive
~~~~~~~~~~~~~~~~~~~

66 people. Mean of 1470361$.
The range is 69223$ to 48521930$.

Other
~~~~~

93 people have this value. The mean is 919,065$
The range is 2$ to 42,667,590$.

Restricted stock
~~~~~~~~~~~~~~~~

110 have this value. The mean is 166,410$
The range is 2,604,490$ to 130,322,300$

Restricted stock deffered
~~~~~~~~~~~~~~~~~~~~~~~~~

18 have this value. The mean is 166,410$.
The range is -7,576,788$ to 15456290$.

Salary
~~~~~~

95 have salary information, the mean is 562,194$.
The range is 477$ to 26704230$.
The lowest salary seems a strange number for salary.

Total payments
~~~~~~~~~~~~~~

125 have this value, with a mean of 5,081,526$.
The minimum is 148$ and the maximum is 309,886,600$

Total stock value
~~~~~~~~~~~~~~~~~

126 have information about total stock value.
The mean is 6,773,857$. The range is -44,093$
to 434,509,500$

Summary
~~~~~~~

Some of the figures here are astonishing. The high figures
and skewed distribution suggest a number of these datasets
are over disperssed.

Ther are also some suspicious low values like a the minimum
salary.


Results
-------

Using the default setting of one label and one feature we can take an intitial review. of the prediction.

.. code-block:: python

    features_list = ['poi', 'salary']

The outputs for the initial algorithm (Gaussian Naive Bayes) is compared to three other algorithms.

.. csv-table:: Algorith comparisson
   :header: "Algorithm", "Accuracy", "Precision", "Recall", "F1", "F2", "Tot. pred.", "True pos.", "False pos.", "False neg.", "True neg."
   :widths: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5

   "GaussianNaiveBayes", 0.256, 0.185, 0.798, 0.300, 0.480, 10000, 1596, 7040, 404, 960
   "RandomForest", 0.705, 0.223, 0.191, 0.205, 0.197, 10000, 382, 1328, 1618, 6672
   "AdaBoost", 0.719, 0.246, 0.196, 0.217, 0.204, 10000, 391, 1201, 1609, 6799
   "KMeans", 0.738, 0.043, 0.013, 0.020, 0.015, 370, 1, 22, 75, 272

Adaboost performs considerably slower.

KMeans gives warning about predicted labels not equal to 0 or 1.

Naive Bayes gives a very high recall valye (0.798).

Questions
---------


No1
~~~

Summarize for us the goal of this project and how machine learning is useful in trying to accomplish it. As part of your answer, give some background on the dataset and how it can be used to answer the project question. Were there any outliers in the data when you got it, and how did you handle those?  [relevant rubric items: “data exploration”, “outlier investigation”]


No2
~~~

What features did you end up using in your POI identifier, and what selection process did you use to pick them? Did you have to do any scaling? Why or why not? As part of the assignment, you should attempt to engineer your own feature that does not come ready-made in the dataset -- explain what feature you tried to make, and the rationale behind it. (You do not necessarily have to use it in the final analysis, only engineer and test it.) In your feature selection step, if you used an algorithm like a decision tree, please also give the feature importances of the features that you use, and if you used an automated feature selection function like SelectKBest, please report the feature scores and reasons for your choice of parameter values.  [relevant rubric items: “create new features”, “properly scale features”, “intelligently select feature”]


No3
~~~

What algorithm did you end up using? What other one(s) did you try? How did model performance differ between algorithms?  [relevant rubric item: “pick an algorithm”]


No4
~~~

What does it mean to tune the parameters of an algorithm, and what can happen if you don’t do this well?  How did you tune the parameters of your particular algorithm? What parameters did you tune? (Some algorithms do not have parameters that you need to tune -- if this is the case for the one you picked, identify and briefly explain how you would have done it for the model that was not your final choice or a different model that does utilize parameter tuning, e.g. a decision tree classifier).  [relevant rubric item: “tune the algorithm”]


No5
~~~

What is validation, and what’s a classic mistake you can make if you do it wrong? How did you validate your analysis?  [relevant rubric item: “validation strategy”]


No6
~~~

Give at least 2 evaluation metrics and your average performance for each of them.  Explain an interpretation of your metrics that says something human-understandable about your algorithm’s performance. [relevant rubric item: “usage of evaluation metrics”]


Code issues and Python 2 to 3 changes
-------------------------------------

^^^^^^^^^^^^^
File Location
^^^^^^^^^^^^^

Kept getting errors about not being able to locate the file based off of the string in the original code.
Changed to:

.. code-block:: Pythoon

    f = os.path.abspath("final_project/final_project_dataset.pkl")

^^^^^^
Pickle
^^^^^^

Changed code in both poi_id.py and tester.py to fit with python 3 and pickle otherwise a TypeError is returned.
Now has to include "rb" (read binary) and "wb" (write binary) instead of "r" and "w" respectively.

From:

.. code-block:: Python

   with open(f, "r") as data_file:
       data_dict = pickle.load(data_file)

To:

.. code-block:: Python

    with open(f, "rb") as data_file:
        data_dict = pickle.load(data_file)

^^^^^^^^^^^^^^^^^^
Depreciation of CV
^^^^^^^^^^^^^^^^^^

Code returns this warning.

    DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functio
    ns are moved. Also note that the interface of the new CV iterators are different from that of this module. This module w
    ill be removed in 0.20.

Changed to:

.. code-block: python

    cv = model_selection.StratifiedShuffleSplit(labels, folds, random_state=42)

.. code-block: python

    features_train, features_test, labels_train, labels_test = \
    model_selection.train_test_split(features, labels,
                                      test_size=0.3,
                                      random_state=42)

^^^^^^
urllib
^^^^^^

urlib has been changed in python 3, needed within startup.py
New code requires urllib.request module.

Changed to:

.. code-block: python

    urllib.request.urlretrieve(url, filename="../enron_mail_20150507.tgz")

I hereby confirm that this submission is my work. I have cited above the origins of any parts of the submission that were taken from Websites, books, forums, blog posts, github repositories, etc.
